(import "graphics.kl") (@using graphics)
(import "device.kl")
(import "utils.kl") (@using utils)
(import "keyboard.kl")

(static uint32 total-memory)
(static uint8 disk-controller (zero device::device))
(static uint8 interrupt-controller (zero device::device))

(fn void main ()
    (local uint8 id 0)
    (local uint32 devices)
    (while (!= id 255)
        (local uint32 device (device::scan id))
        (cond (!= device 0) (
            (set-var devices (+ devices 1))
            (switch (get device::device.class device)
            0x1 ( ; memory
                (set-var total-memory (get device::device.limit-0 device))
            )
            0x2 ( ; disk controller
                (copy device &disk-controller (size device::device))
            )
            0x3 ( ; interrupt controller
                (copy device &interrupt-controller (size device::device))
            )
            0x11 ( ; keyboard
                (keyboard::init device)
            ))
            ;(device::print device)
            ;(graphics::draw-string (str "-----")) (newline)
        ))
        (set-var id (+ id 1))
    )

    (newline) (draw-string (str "vm-boot")) (newline) (newline)
    (draw-string (str "Devices detected: ")) (draw-int devices) (newline)
    (draw-string (str "Total memory:     ")) (draw-int total-memory)
    (draw-string (str " (")) (draw-int (/ total-memory 1048576)) (draw-string (str "MiB)")) (newline)

    (local uint8 disks (get-8 (+ 1 (get device::device.base-address-0 &disk-controller))))
    (cond (== 0 (get device::device.id &disk-controller)) (
        (set-var color 0xFFAAAA)
        (newline) (draw-string (str "No disk controller found.")) (newline)
    ) (== 0 (get device::device.id &keyboard::keyboard)) (
        (set-var color 0xFFAAAA)
        (newline) (draw-string (str "No keyboard found.")) (newline)
    ) (== 0 (get device::device.id &interrupt-controller)) (
        (set-var color 0xFFAAAA)
        (newline) (draw-string (str "No interrupt controller found.")) (newline)
    ) (!= disks 0) (
        (newline) (draw-string (str "Choose a device to boot from:")) (newline)

        (local uint32 first-y graphics::cursor-y)
        (local uint32 disk-count)

        (local uint32 disk-controller-address (get device::device.base-address-0 &disk-controller))
        (local uint32 disk-sector-address (get device::device.base-address-1 &disk-controller))
        (local uint32 interrupt-controller-address (get device::device.base-address-0 &interrupt-controller))

        (local uint32 bit)
        (while (< bit 8)
            (cond (== 1 (& 1 (>> disks bit))) (
                (draw-string (str "  Disk ")) (draw-int bit) (draw-string (str " ("))
                (set-8 (+ 1 disk-controller-address) bit) ; input disk idx
                (set-8 disk-controller-address 4) ; select disk
                (set-8 disk-controller-address 8) ; get sector count
                (draw-int (get-32 (+ 3 disk-controller-address))) (draw-string (str " sectors)")) (newline)

                (set-var disk-count (+ disk-count 1))
            ))
            (set-var bit (+ bit 1))
        )

        (local uint32 idx)

        (set-var graphics::cursor-x 0)
        (set-var graphics::cursor-y first-y)
        (draw-character '>)

        (set-16 (+ 1 interrupt-controller-address) 0) ; unmask all interrupt lines
        (set-8 interrupt-controller-address 0) ; enable hardware interrupts
        (asm "sti") ; enable all interrupts

        (while (true)
            (cond (!= keyboard::scan-code 0) (
                (switch keyboard::scan-code
                keyboard::key::up (
                    (cond (!= idx 0) (
                        (set-var idx (- idx 1))
                        (draw-empty-character)
                        (set-var graphics::cursor-y (- graphics::cursor-y 8))
                        (draw-character '>)
                    ))
                )
                keyboard::key::down (
                    (cond (!= idx (- disk-count 1)) (
                        (set-var idx (+ idx 1))
                        (draw-empty-character)
                        (set-var graphics::cursor-y (+ graphics::cursor-y 8))
                        (draw-character '>)
                    ))
                )
                keyboard::key::enter (
                    (asm "cli") ; disable all interrupts
                    (set-8 (+ 1 disk-controller-address) idx) ; input disk idx
                    (set-8 disk-controller-address 4) ; select disk
                    (set-32 (+ 1 disk-controller-address) 0) ; sector 0
                    (set-8 disk-controller-address 1) ; read sector
                    (draw-empty-screen)
                    (copy disk-sector-address 0 512)
                    (asm "j 0")
                ))
                (set-var keyboard::scan-code 0)
            ))
        )
    ) (true) (
        (set-var color 0xFFAAAA)
        (newline) (draw-string (str "No bootable devices found.")) (newline)
    ))
)